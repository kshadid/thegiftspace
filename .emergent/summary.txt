<analysis>
The AI engineer successfully built a full-stack wedding cash registry application, closely mimicking hitchd.com. The development was iterative, starting from an MVP with React, FastAPI, and MongoDB, and expanding upon core functionalities. Key architectural decisions included using Shadcn UI, JWT authentication, and MongoDB for data. Significant effort was dedicated to improving the owner dashboard, implementing a robust, isolated Admin Console with detailed metrics and management tools, and addressing various bugs (e.g., add gift not working, mock data conflicts, admin login failures). The platform now includes internationalization scaffolding, legal pages, and basic SEO. The current task is to integrate email (SendGrid) and monitoring (Sentry), pending user provision of API keys. The AI is awaiting confirmation to begin scaffolding these integrations.
</analysis>

<product_requirements>
The primary objective is to clone hitchd.com as a wedding cash registry, allowing couples to create and manage cash funds for gifts. The application must achieve pixel-perfect design, use specific fonts/colors, and initially target Dubai with English support, with future global expansion in mind. A full JWT-based account system is required for couples to manage their registries. Implemented features include registry/fund creation and management, a public-facing registry page (), guest contributions (mocked payments), robust authentication, owner-only analytics and CSV export, collaborator management, four theme presets, and chunked image uploads. Recent user feedback drove a redesign of the event editor into a single, sleek page and the development of a comprehensive, isolated Admin Console for platform oversight, including signup tracking, event/fund management, deep analytics, and client database management.
</product_requirements>

<key_technical_concepts>
- **Full-stack**: React (frontend), FastAPI (backend), MongoDB (database).
- **UI/UX**: Shadcn UI, Lucide-React for icons.
- **Authentication**: JWT, React Context for state.
- **API**: Axios,  prefix, CORS.
- **Data**: Pydantic models, MongoDB unique indexes, UUIDs.
- **File Management**: Chunked uploads.
- **Infrastructure**: Supervisor, Kubernetes Ingress, environment variables ().
- **Internationalization**: i18n context/provider.
</key_technical_concepts>

<code_architecture>

-   ****: The core FastAPI application. It has evolved to include all API endpoints, MongoDB interactions for CRUD operations (registries, funds, contributions, users), JWT authentication, file uploads, analytics, and CSV exports. Recent additions include comprehensive Admin APIs for statistics, user/registry management (search, lock/unlock), audit logs, and a dynamic CORS allowlist. Critical registry endpoints were re-implemented to ensure admin overrides and proper permissions.
-   ****: The main React application file. It now handles routing (), global authentication context (), internationalization (), and includes shared layout components like  and .
-   ****: The registry owner's editor page. It was completely redesigned from a tabbed interface to a single-page layout, integrating analytics, gift management (with quick-edit chips, reorder), and a modal for general event settings.
-   ****: The public-facing view of a registry. It displays dynamic registry and fund data, contributions, and has been enhanced with category filters and a quick search input.
-   ** (New)**: The main Admin Console dashboard. Provides an overview of platform-wide KPIs (active events/gifts, average/max contributions), recent user activity, and search functionalities for users and registries. It's strictly isolated from user-facing dashboards.
-   ** (New)**: A dedicated page within the Admin Console to view and manage specific registry details, including funds, contributions, audit logs, and lock/unlock actions.
-   ** (New)**: A dedicated page within the Admin Console to view specific user details, including owned/collaborated registries and recent activity.
-   ** (Modified)**: A generic UI component for modal dialogs. Modified to fix z-index issues and improve focus accessibility, specifically observed with the admin lock/unlock dialog.
-   ** (New)**: Implements a cookie consent banner that conditionally appears based on analytics settings in .
-   ** (New)**: The application's footer, including dynamically generated links to legal pages.
-   ** (New)**: Establishes the internationalization framework with an  and  translation hook, defaulting to English and ready for additional locales.
-   ** (New)**: Contains logic to initialize Google Analytics based on  flags and a GA ID.
-   ** (New)**: Provides directives for web crawlers, enhancing SEO.
-   ** (New)**: A sitemap to help search engines discover and index the application's pages.
-   ** (Modified)**: Initially used for frontend mock data, it was updated to clear sample data upon a logged-in user's interaction to prevent data discrepancies.
</code_architecture>

<pending_tasks>
- **Payments Integration**: User will provide integration documents/keys later.
- **Email Functionality**: SendGrid API key, verified from email, and optional template IDs are required for guest receipts and owner notifications.
- **Monitoring/Alerting**: Sentry DSN is needed for error tracking and uptime checks.
- **Security Hardening**: CAPTCHA on contribution forms, stricter input constraints on backend.
- **Admin Console Enhancements**: Deep analytics, issue resolution tools (merge users, reassign ownership), manual backup/export.
- **Localization**: Wiring more UI strings for translation, adding Arabic/French locales.
- **Legal Content**: Populating Terms and Privacy pages with actual legal copy.
</pending_tasks>

<current_work>
The application is a fully functional, full-stack wedding cash registry, closely matching the Hitchd concept. It supports a comprehensive account system with JWT authentication (register/login/me) and protected routes. Owners can create and manage multiple registries and cash funds with titles, descriptions, goals, images, drag-and-drop reordering, bulk actions, and quick-edit features (pin/visibility, inline goal edit). The public registry page () dynamically displays event details, fund progress, and a contribution modal, now augmented with category filters and quick search. An isolated and functional Admin Console at  provides platform-wide KPIs (active events/gifts, average/max contributions), recent activity, user/registry search, and registry lock/unlock capabilities. Dedicated Admin Registry Detail () and User Detail () pages offer specific management views and audit logs. Admin access is controlled via an email allowlist (kshadid@gmail.com is default) with non-admins redirected to a Not authorized page. Backend registry endpoints have been restored and hardened with proper permissions and admin overrides. Internationalization scaffolding, legal pages (, ), basic SEO (, ), and an analytics placeholder are implemented. Login issues for admin accounts were resolved with a development-convenient auto-bootstrap/password-reset mechanism. Minor UI polish on dialogs (z-index, focus) is complete. The frontend and backend are fully connected via APIs, adhering to all URL/environment variable rules.
</current_work>

<optional_next_step>
Scaffold the email service for SendGrid and wire it to the contribution path, allowing for later key provision.
</optional_next_step>
